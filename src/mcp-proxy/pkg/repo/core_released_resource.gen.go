/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mcp_proxy/pkg/entity/model"
)

func newCoreReleasedResource(db *gorm.DB, opts ...gen.DOOption) coreReleasedResource {
	_coreReleasedResource := coreReleasedResource{}

	_coreReleasedResource.coreReleasedResourceDo.UseDB(db, opts...)
	_coreReleasedResource.coreReleasedResourceDo.UseModel(&model.ReleasedResource{})

	tableName := _coreReleasedResource.coreReleasedResourceDo.TableName()
	_coreReleasedResource.ALL = field.NewAsterisk(tableName)
	_coreReleasedResource.ID = field.NewInt(tableName, "id")
	_coreReleasedResource.ResourceVersionID = field.NewInt(tableName, "resource_version_id")
	_coreReleasedResource.ResourceID = field.NewInt(tableName, "resource_id")
	_coreReleasedResource.ResourceName = field.NewString(tableName, "resource_name")
	_coreReleasedResource.ResourceMethod = field.NewString(tableName, "resource_method")
	_coreReleasedResource.ResourcePath = field.NewString(tableName, "resource_path")
	_coreReleasedResource.GatewayID = field.NewInt(tableName, "api_id")
	_coreReleasedResource.Data = field.NewString(tableName, "data")

	_coreReleasedResource.fillFieldMap()

	return _coreReleasedResource
}

type coreReleasedResource struct {
	coreReleasedResourceDo coreReleasedResourceDo

	ALL               field.Asterisk
	ID                field.Int
	ResourceVersionID field.Int
	ResourceID        field.Int
	ResourceName      field.String
	ResourceMethod    field.String
	ResourcePath      field.String
	GatewayID         field.Int
	Data              field.String

	fieldMap map[string]field.Expr
}

// Table ...
func (c coreReleasedResource) Table(newTableName string) *coreReleasedResource {
	c.coreReleasedResourceDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

// As ...
func (c coreReleasedResource) As(alias string) *coreReleasedResource {
	c.coreReleasedResourceDo.DO = *(c.coreReleasedResourceDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *coreReleasedResource) updateTableName(table string) *coreReleasedResource {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.ResourceVersionID = field.NewInt(table, "resource_version_id")
	c.ResourceID = field.NewInt(table, "resource_id")
	c.ResourceName = field.NewString(table, "resource_name")
	c.ResourceMethod = field.NewString(table, "resource_method")
	c.ResourcePath = field.NewString(table, "resource_path")
	c.GatewayID = field.NewInt(table, "api_id")
	c.Data = field.NewString(table, "data")

	c.fillFieldMap()

	return c
}

// WithContext ...
func (c *coreReleasedResource) WithContext(ctx context.Context) ICoreReleasedResourceDo {
	return c.coreReleasedResourceDo.WithContext(ctx)
}

// TableName ...
func (c coreReleasedResource) TableName() string { return c.coreReleasedResourceDo.TableName() }

// Alias ...
func (c coreReleasedResource) Alias() string { return c.coreReleasedResourceDo.Alias() }

// Columns ...
func (c coreReleasedResource) Columns(cols ...field.Expr) gen.Columns {
	return c.coreReleasedResourceDo.Columns(cols...)
}

// GetFieldByName ...
func (c *coreReleasedResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *coreReleasedResource) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["resource_version_id"] = c.ResourceVersionID
	c.fieldMap["resource_id"] = c.ResourceID
	c.fieldMap["resource_name"] = c.ResourceName
	c.fieldMap["resource_method"] = c.ResourceMethod
	c.fieldMap["resource_path"] = c.ResourcePath
	c.fieldMap["api_id"] = c.GatewayID
	c.fieldMap["data"] = c.Data
}

func (c coreReleasedResource) clone(db *gorm.DB) coreReleasedResource {
	c.coreReleasedResourceDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c coreReleasedResource) replaceDB(db *gorm.DB) coreReleasedResource {
	c.coreReleasedResourceDo.ReplaceDB(db)
	return c
}

type coreReleasedResourceDo struct{ gen.DO }

// ICoreReleasedResourceDo ...
type ICoreReleasedResourceDo interface {
	gen.SubQuery
	Debug() ICoreReleasedResourceDo
	WithContext(ctx context.Context) ICoreReleasedResourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICoreReleasedResourceDo
	WriteDB() ICoreReleasedResourceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICoreReleasedResourceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICoreReleasedResourceDo
	Not(conds ...gen.Condition) ICoreReleasedResourceDo
	Or(conds ...gen.Condition) ICoreReleasedResourceDo
	Select(conds ...field.Expr) ICoreReleasedResourceDo
	Where(conds ...gen.Condition) ICoreReleasedResourceDo
	Order(conds ...field.Expr) ICoreReleasedResourceDo
	Distinct(cols ...field.Expr) ICoreReleasedResourceDo
	Omit(cols ...field.Expr) ICoreReleasedResourceDo
	Join(table schema.Tabler, on ...field.Expr) ICoreReleasedResourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICoreReleasedResourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICoreReleasedResourceDo
	Group(cols ...field.Expr) ICoreReleasedResourceDo
	Having(conds ...gen.Condition) ICoreReleasedResourceDo
	Limit(limit int) ICoreReleasedResourceDo
	Offset(offset int) ICoreReleasedResourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICoreReleasedResourceDo
	Unscoped() ICoreReleasedResourceDo
	Create(values ...*model.ReleasedResource) error
	CreateInBatches(values []*model.ReleasedResource, batchSize int) error
	Save(values ...*model.ReleasedResource) error
	First() (*model.ReleasedResource, error)
	Take() (*model.ReleasedResource, error)
	Last() (*model.ReleasedResource, error)
	Find() ([]*model.ReleasedResource, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReleasedResource, err error)
	FindInBatches(result *[]*model.ReleasedResource, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReleasedResource) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICoreReleasedResourceDo
	Assign(attrs ...field.AssignExpr) ICoreReleasedResourceDo
	Joins(fields ...field.RelationField) ICoreReleasedResourceDo
	Preload(fields ...field.RelationField) ICoreReleasedResourceDo
	FirstOrInit() (*model.ReleasedResource, error)
	FirstOrCreate() (*model.ReleasedResource, error)
	FindByPage(offset int, limit int) (result []*model.ReleasedResource, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICoreReleasedResourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

// Debug ...
func (c coreReleasedResourceDo) Debug() ICoreReleasedResourceDo {
	return c.withDO(c.DO.Debug())
}

// WithContext ...
func (c coreReleasedResourceDo) WithContext(ctx context.Context) ICoreReleasedResourceDo {
	return c.withDO(c.DO.WithContext(ctx))
}

// ReadDB ...
func (c coreReleasedResourceDo) ReadDB() ICoreReleasedResourceDo {
	return c.Clauses(dbresolver.Read)
}

// WriteDB ...
func (c coreReleasedResourceDo) WriteDB() ICoreReleasedResourceDo {
	return c.Clauses(dbresolver.Write)
}

// Session ...
func (c coreReleasedResourceDo) Session(config *gorm.Session) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Session(config))
}

// Clauses ...
func (c coreReleasedResourceDo) Clauses(conds ...clause.Expression) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Clauses(conds...))
}

// Returning ...
func (c coreReleasedResourceDo) Returning(value interface{}, columns ...string) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

// Not ...
func (c coreReleasedResourceDo) Not(conds ...gen.Condition) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Not(conds...))
}

// Or ...
func (c coreReleasedResourceDo) Or(conds ...gen.Condition) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Or(conds...))
}

// Select ...
func (c coreReleasedResourceDo) Select(conds ...field.Expr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Select(conds...))
}

// Where ...
func (c coreReleasedResourceDo) Where(conds ...gen.Condition) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Where(conds...))
}

// Order ...
func (c coreReleasedResourceDo) Order(conds ...field.Expr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Order(conds...))
}

// Distinct ...
func (c coreReleasedResourceDo) Distinct(cols ...field.Expr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Distinct(cols...))
}

// Omit ...
func (c coreReleasedResourceDo) Omit(cols ...field.Expr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Omit(cols...))
}

// Join ...
func (c coreReleasedResourceDo) Join(table schema.Tabler, on ...field.Expr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Join(table, on...))
}

// LeftJoin ...
func (c coreReleasedResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

// RightJoin ...
func (c coreReleasedResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

// Group ...
func (c coreReleasedResourceDo) Group(cols ...field.Expr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Group(cols...))
}

// Having ...
func (c coreReleasedResourceDo) Having(conds ...gen.Condition) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Having(conds...))
}

// Limit ...
func (c coreReleasedResourceDo) Limit(limit int) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Limit(limit))
}

// Offset ...
func (c coreReleasedResourceDo) Offset(offset int) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Offset(offset))
}

// Scopes ...
func (c coreReleasedResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

// Unscoped ...
func (c coreReleasedResourceDo) Unscoped() ICoreReleasedResourceDo {
	return c.withDO(c.DO.Unscoped())
}

// Create ...
func (c coreReleasedResourceDo) Create(values ...*model.ReleasedResource) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

// CreateInBatches ...
func (c coreReleasedResourceDo) CreateInBatches(values []*model.ReleasedResource, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c coreReleasedResourceDo) Save(values ...*model.ReleasedResource) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

// First ...
func (c coreReleasedResourceDo) First() (*model.ReleasedResource, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasedResource), nil
	}
}

// Take ...
func (c coreReleasedResourceDo) Take() (*model.ReleasedResource, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasedResource), nil
	}
}

// Last ...
func (c coreReleasedResourceDo) Last() (*model.ReleasedResource, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasedResource), nil
	}
}

// Find ...
func (c coreReleasedResourceDo) Find() ([]*model.ReleasedResource, error) {
	result, err := c.DO.Find()
	return result.([]*model.ReleasedResource), err
}

// FindInBatch ...
func (c coreReleasedResourceDo) FindInBatch(
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) (results []*model.ReleasedResource, err error) {
	buf := make([]*model.ReleasedResource, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

// FindInBatches ...
func (c coreReleasedResourceDo) FindInBatches(
	result *[]*model.ReleasedResource,
	batchSize int,
	fc func(tx gen.Dao, batch int) error,
) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

// Attrs ...
func (c coreReleasedResourceDo) Attrs(attrs ...field.AssignExpr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

// Assign ...
func (c coreReleasedResourceDo) Assign(attrs ...field.AssignExpr) ICoreReleasedResourceDo {
	return c.withDO(c.DO.Assign(attrs...))
}

// Joins ...
func (c coreReleasedResourceDo) Joins(fields ...field.RelationField) ICoreReleasedResourceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

// Preload ...
func (c coreReleasedResourceDo) Preload(fields ...field.RelationField) ICoreReleasedResourceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

// FirstOrInit ...
func (c coreReleasedResourceDo) FirstOrInit() (*model.ReleasedResource, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasedResource), nil
	}
}

// FirstOrCreate ...
func (c coreReleasedResourceDo) FirstOrCreate() (*model.ReleasedResource, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasedResource), nil
	}
}

// FindByPage ...
func (c coreReleasedResourceDo) FindByPage(
	offset int,
	limit int,
) (result []*model.ReleasedResource, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

// ScanByPage ...
func (c coreReleasedResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

// Scan ...
func (c coreReleasedResourceDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

// Delete ...
func (c coreReleasedResourceDo) Delete(models ...*model.ReleasedResource) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *coreReleasedResourceDo) withDO(do gen.Dao) *coreReleasedResourceDo {
	c.DO = *do.(*gen.DO)
	return c
}
